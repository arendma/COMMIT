function models = getMultipleModels(genomePath, habitat, dataDir, outDir,...
    taxPath, gapFillDir, getModelFromID, writeToFile, modelDir)
%% models = getMultipleModels(genomePath, habitat, dataDir, outDir, taxPath, gapFillDir, getModelFromID, writeToFile, modelDir)
% Iterates through all files for the habitat (subfolder of the directory where the
% genomes are located), generates and merges KEGG and MetaCyc-based
% reconstructions.
% Input:
%           char genomePath:            path to the top directory
%                                       where the genomes are located
%           cell habitat:              array containing the names of the
%                                       subfolders in the genomePath
%           char dataDir:               path to the top directory
%                                       where the trained HMMs are stored
%           char outDir:                if empty, .out files will be be
%                                       generated in a temporary directory 
%                                       and deleted after model generation,
%                                       otherwise the .out files will be 
%                                       stored in the given directory
%           char taxPath:               path to the directory where the 
%                                       files contaning the KEGG organism 
%                                       ids is located of where it
%           char gapFillDir:            path to the directory where the
%                                       models are stored, whoch should be 
%                                       used for gap filling 
%                                       (see fillGaps function)
%           logical getModelFromID:     if true, the KEGG organism ids will
%                                       be used, default false
%           logical writeToFile:        if 1, the merged model will be 
%                                       saved as a .xml file, if 2, the
%                                       merged models will be saved in a
%                                       combined .mat file
%           char modelDir:              specifies the location where the 
%                                       model files should be saved

if ~exist('taxPath', 'var')
    taxPath = 0;
else
    wgsTaxonomyFile = fullfile(taxPath, 'wgs_taxonomy.txt');
end

if ~ischar(gapFillDir)
    gapFillDir = [];
end

if ~ischar(modelDir)
    fprintf("\nNo directory for output models given\n")
    writeToFile = 0;
end

if ~exist('writeToFile', 'var') || ~ismember(writeToFile, 0:2)
    writeToFile = 0;
    modelDir = [];
end

% If true, the taxonomy will be read from file of generated by using the
% KEGG API
if getModelFromID
    % Check if the file containing the KEGG organism ids exists if not
    if ~exist(fullfile(taxPath, 'KEGGTaxonomyIDs.csv'), 'file')
        fprintf(['\nFailed to open ',fullfile(taxPath, 'KEGGTaxonomyIDs.tsv'),'\n'])
        fprintf('KEGG taxonomy file will be generated\n')
        [sampleID_list, ~, keggID_list] = getKEGGTaxID(wgsTaxonomyFile);
    else
        fprintf('\nReading Taxonomy table\n')
        taxonomyTable = readtable(fullfile(taxPath, 'KEGGTaxonomyIDs.csv'),...
            'ReadVariableNames', false);
        sampleID_list = taxonomyTable.Var1;
        keggID_list = taxonomyTable.Var3;
    end
end

% Retrive a list of all relevant FASTA files
allFastaFiles = dir(fullfile(genomePath, habitat));
% Do not include '.' and '..'
allFastaFiles = allFastaFiles(3:end);
allFastaFiles = {allFastaFiles.name};
% Declare cell array that will be returned
models = cell(numel(allFastaFiles),1);

% Import template models for gap filling
if ~isempty(gapFillDir)
    try
        templateModelNames = dir(fullfile(gapFillDir,'*.xml'));
        templateModelNames = {templateModelNames.name};
        templateModels = cell(numel(templateModelNames),1);
    catch
        error('The template models for gap filling could not be localized.\n')
    end
    for m=1:numel(templateModelNames)
        fprintf('Reading template model %s\n', templateModelNames{m})
        templateModels{m} = importModel(fullfile(gapFillDir,...
            templateModelNames{m}));
    end
else
    fprintf('\nNo gap filling will be performed as no reference models are given\n')
end

for i=1:numel(allFastaFiles)
    gz = 0;
    fastaFile = strtrim(allFastaFiles{i});
    if contains(fastaFile, '.gz')
        gz = 1;
        fprintf('\nFASTA file is gzip compressed, unpacking %s\n', fastaFile)
        disp(fullfile(genomePath, habitat, fastaFile))
        [status, ~] = unix(['gunzip ', fullfile(genomePath, habitat, fastaFile)]);
        if status
            warning('\n%s could not be unpacked or not located!\n', fastaFile)
            continue
        end
    end
    sampleID = strsplit(fastaFile, '.');
    sampleID = sampleID{1};
    fastaFile = strcat(sampleID, '.faa');
    if ~getModelFromID
        keggID = [];
    else
        keggID = keggID_list{contains(sampleID_list, sampleID)};
    end
    
    % Get the merged model from KEGG and MetaCyc databases
    fprintf('\n####################################\n\t%s (sample #%d)\n####################################\n',...
        sampleID, i)
    model = getMergedModelKEGGMetaCyc(sampleID, keggID,...
        fullfile(genomePath, habitat, fastaFile), dataDir, outDir, getModelFromID);

    % subSystems field is mostly not only of type cell which can lead to
    % problems with writing and reading
    for field=1:numel(model.subSystems)
        if ischar(model.subSystems{field})
            model.subSystems{field} = {model.subSystems{field}};
        end
    end
    
    % Write the model to a .xml file
    try
        if writeToFile ~= 0
            fprintf('\nWriting model to file\n')
            if writeToFile == 1
                exportModel(model, fullfile(modelDir, sampleID), true);
            elseif writeToFile == 2
                % Save the model as a variable named as the sampleID
                eval(strcat(sampleID, '=', 'model;'));
                % Append the model to the workspace or create .mat file
                workspace = fullfile(modelDir, strcat(habitat,'.mat'));
                if ~exist(workspace, 'file')
                    eval(strcat('save(workspace, "',sampleID,'");'));
                else
                    eval(strcat('save(workspace, "',sampleID,'", "-append")',';'));
                end
            end
        end
    catch
        fprintf('\nFile could not be saved\n')
    end
    if gz
        [status, ~] = unix(['gzip ', fullfile(genomePath, habitat, fastaFile)]);
        if status
            warning('\n%s, could not be compressed using gzip\n')
        end
    end
    % Perform gap filling with the given template models
    if ~isempty(gapFillDir)
        fprintf('Gap-filling the model...\n')
        models{i} = fillGaps(model, templateModels, false, true);
    end
end

end

    
